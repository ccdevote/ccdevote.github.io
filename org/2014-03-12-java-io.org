#+TITLE: Java I/O 学习笔记
#+AUTHOR: Zhiyong Ma
#+EMAIL: ccdevote@gmail.com
#+YAML/CATEGORY:java

Java中的I/O分为传统IO、NIO、NIO2三类,标准IO是在java.io包中提供的最
原始的同步IO访问方式，NIO即：no-blocking io是JDK1.4中提供的新的IO
操作的API，提供了非阻塞IO操作。NIO2是JDK1.7中新增的IO操作的API，主
要对原来的NIO进行了增强。
* OIO
传统IO又叫OIO，主要包含三个部分：
  1. 字节流 InputStream/OutputStream的子类
  2. 字符流 Reader/Writer的子类
  3. 随机流 RandomAccessFile
*InputStream* 的直接体系结构如下：
#+BEGIN_SRC plantuml :file ../images/inputstream.png :cmdline -charset UTF-8
@startuml
InputStream <|--FileInputStream
InputStream <|--ByteArrayInputStream
InputStream <|--FilterInputStream
InputStream <|--ObjectInputStream
InputStream <|--PipedInputStream
InputStream <|--SequenceInputStream
InputStream <|--StringBufferInputStream
InputStream <|--AudioInputStream
FilterInputStream <|--BufferedInputStream
@enduml
#+END_SRC
其中比较常用的应该就是FileInputStream和
BufferedInputStream了,FileInputStream以字节流的方式读取文件。
BufferedInputStream是一个包装类，用来包装InputStream，提供缓冲输入以及
支持mark和reset功能。在创建BufferedInputStream时会创建一个内部缓冲区数
组。在读取或跳过流中的字节时，可根据需要从包含的输入流再次填充该内部缓
冲区，一次填充多个字节。mark 操作记录输入流中的某个点，reset 操作使得
在从包含的输入流中获取新字节之前，再次读取自最后一次 mark 操作后读取的
所有字节。

*OutputStream* 的体系结构如下：
#+BEGIN_SRC plantuml :file ../images/outputstream.png :cmdline -charset UTF-8
@startuml
OutputStream <|--FileOutputStream
OutputStream <|--ByteArrayOutputStream
OutputStream <|--FilterOutputStream
OutputStream <|--ObjectOutputStream
OutputStream <|--PipedOutputStream
FilterOutputStream <|--BufferedOutputStream
@enduml
#+END_SRC
同样常用的有FileOutputStream用来支持文件写入操作。BufferedOutputStream
该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入
底层输出流中，而不必针对每次字节写入调用底层系统。
