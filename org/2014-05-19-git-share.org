#+TITLE:Spring基础
#+AUTHOR:马智勇
#+EMAIL:zhiyong.ma@qunar.com
#+OPTIONS: ^:{}
#+YAML/CATEGORY: 技术博客
#+YAML/TAGS:[java,spring]
* 2014-05-19 [1/2]
** DONE 培训Spring 刘杰老师
   CLOSED: [2014-05-19 一 21:21]
   - State "DONE"       from ""           [2014-05-19 一 21:21]
*** 面向接口编程
1. 接口的定义
#+BEGIN_QUOTE
在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。
在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重
要了；而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通
信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设
计的主要工作内容。面向接口编程就是指按照这种思想来编程。
#+END_QUOTE
2. 面向接口编程的好处
#+BEGIN_QUOTE
1. 更加抽象
2. 提高编程的灵活性
3. 提高可维护性
#+END_QUOTE
*** IOC(DI)&AOP原理及好处
1. IOC原理
#+BEGIN_QUOTE
IOC控制反转就是对象的实例化不需要显示的new，而是等着别人给送过来，就像
幼儿园的小孩子一样，不用自己去做饭，等着老师或者家长搭配好饭菜给送过来，
方便、快捷、灵活。IOC通过依赖注入（DI）的方式得到对象的实例。DI就是结合
反射/字节码工程动态的生成对象后注入给需要创建对象的接口。
#+END_QUOTE
2. AOP原理
#+BEGIN_QUOTE
Aspect Oriented Programming(AOP)，面向切面编程，是一个比较热门的话题。
AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过
程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。
AOP是通过代理模式/字节码工程对类进行增强，可以在切点进行一些附加的操作，
比如常见的在类的执行前后执行一些资源的准备或清理工作，或者记录日志等。
使用AOP可以减少程序开发过程中不必要关心的琐碎问题，从而专注于核心代码
的编写。
#+END_QUOTE
*** TODO Spring IOC&AOP配置
这部分内容等全部学完之后统一整理。
** TODO 准备GIT分享
1. GIT起源
2. GIT与SVN的区别

3. *GIT基础要点*
4. *GIT基础*
5. *GIT分支*
6. *分布式GIT*
7. *IDEA中使用GIT*

8. 自定义GIT（选讲）
9. GIT内部原理（选讲）
10. GIT上搭建博客（选讲）
