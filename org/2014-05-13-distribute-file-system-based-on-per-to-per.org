#+TITLE:基于对等网络的分布式文件系统
#+AUTHOR: Afanty
#+EMAIL: ccdevote@gmail.com

#+OPTIONS: ^:{}
#+YAML/CATEGORY: 技术博客
#+YAML/TAGS:[分布式]

* 引言
** 课题背景
*** 大叔据时代来临
    随着云时代的来临，大数据（Big Data）也吸引了越来越多的关注。大数据通常
用来形容一个公司创造的大量非结构化和半结构化数据，这些数据在下载到相关
关系型数据库用于分析时会花费过多的时间和金钱。大数据分析常需要和云计算
联系到一起，因为实时的大型数据集分析需要像MapReduce一样的框架向数十，数
百，甚至数千的电脑分配工作。简而言之，从各种各样的数据类型中快速的获得
有价值的数据，就是大数据技术。

大数据有如下特点：
1. 数据体量巨大。从TB级别，跃升到PB级别
2. 数据类型繁多，如网络日志，视频，图片，地理位置信息等等
3. 处理速度快，1秒定律。最后这一点也是和传统的数据挖掘技术有着本质的不同

*** 存储技术面临挑战
大数据时代的来临，越来越多各式各样的信息被网罗其中，形成了一个广阔宏大
的信息空间。在这个空问中,存在着海量的信息,这种模式下的储技术面
临着以下挑战：
1. 存储分布的地域空间更加广阔。自从1988年Internet对外丌放以来,联网计算
   机的数量增长迅速。Internet的飞速发展导致存储分布的地域空问空前扩大,
   如何快速、高效、安全地让网络用户在如此浩瀚的信息海洋之中找到并获取自
   己所需的资源,是存储系统必须应对的挑战之一。
2. 存储容量急剧膨胀。早期的Internet服务内容相对单一,主要是文本文件、
   email、网页和图片文档等,数据量小,要求的存储空间也小。而随着网络应用
   的不断发展,服务内容日趋多元化,从软件、音乐到视频、游戏等,这些服务内
   容数据量大,动辄数十兆字节,其至超过1吉字节,导致存储容量急剧膨胀。这种
   变化不仅要求存储系统具有巨大的存储容量,而且对存储系统的可扩展性提出
   了更高的要求。
3. 对存储服务器提出了更高的要求。随着Internet地域空间的扩大,联网用户的
   快速增长,给Internet高密度、海量的数据请求,这就使系统对存储服务器提了
   更高的要求。掘统计,一台普通的www服务器在一分钟之内,就可能收到100万次
   的数据请求。
4. 对存储的可靠件要求越来越高。随着Internet信息化的推进,数据在企业全部
   资产中所占的比例越来越大,特别是对于已经高度电子化的现代企业来说,运行
   过程中积累起来的大量数据资料是最有价值的财富。如果这些数据一旦丢失或
   损坏,企业将遭受沉重的打击,甚至灭顶之灾。

针对以上挑战,人们提出了另外一种计算模式,称之为基于目录的分布式模式
(Directory.based Distributed Model)。该模式中,网络资源是分布的,客户机向
目录服务器提出服务请求,目录服务器决定哪个网络资源提供者提供服务,然后客
户机独立地与网络资源提供者联系,获取其请求的服务,系统通过目录服务器均衡
客户机流量,让多个网络资源提供者分担客户机的请求。相对于传统的客户机/服
务器模式而言,该计算模式中,服务器性能要求和带宽瓶颈问题得到了缓解,但是目
录服务器仍然是系统的热点,系统的可扩展性有限。随着基于雠emet的端系统计算
能力的迅速增强,原先在以上计算模式中通常被忽视且广泛存在的端系统成为一种
宝贵的计算资源。基于端的无中心模式(Peer-based Decentralized Model)应运
而生,该模式也称为对等计算模式(Pe*to.Peer Model),即P2P计算模式。在P2P计
算模式中所有节点是对等的,这些节点既是客户机同时又是服务器,称之为对等机
(SER惭cliENT’SERVENT),节点之间通过协作互惠的原则共享彼此的资源。这种计
算模式具有诸如无中心、自组织以及高可扩展性等特征,为构建可靠、可扩
** P2P技术介绍
** 存储技术介绍
** 本文研究内容
** 全文结构
* 需求分析
* 系统设计与实现
** 系统设计
   存储系统整体设计
** 文件系统
*** 存储结构
存储结构以一个单独的目录为基本存储单元，称之为存储单元（Store Unit，简
称SU）。存储单元的结构分为四个层次，如下图所示，分别为数据文件（Data
File，简称DF），数据页（Data Page，简称DP），数据行（Data Row，简称DR）
和数据字段（Data Field，简称DFld）。其中，每个存储单元中包含一个或者多
个2数据文件（按照列划分），每个数据文件中包含多个数据页，每个数据页中包
含多个数据行，每个数据行中可能包含多个数据字段，数据字段可能含有嵌套等
复杂数据结构；同时，每个存储单元中还包含一个索引文件（虚拟），记录了所
有的索引数据。如下图所示：
[[../imgages/storeunit.png]]
*** 数据字段类型
为了适应实际生产环境中的多样化需求，Gingko支持基本数据类型和复杂数据类
型，基本数据类型包括：单字节整型、双字节整型、四字节整型、八字节整型、
单精度浮点型、双精度浮点型、字符串、二进制串共计八种基本的数据类型。复
杂数据类型包括：数组（array），结构（struct），映射（map）。为了方便在
程序中实现，需要为每种数据类型设计一个唯一的编号，从而在二进制流中快速
识别出具体的数据类型。数据类型的编号如下表所示：
| 类型标准名称 | 编号 | 长度(byte) |
|--------------+------+------------|
| int8         |    1 |          1 |
| int16        |    2 |          2 |
| int32        |    3 |          4 |
| int64        |    4 |          8 |
| float        |    5 |          4 |
| double       |    6 |          8 |
| string       |    7 |   可变长度 |
| bytes        |    8 |   可变长度 |
| array        |    9 |        --- |
| struct       |   10 |        --- |
| map          |   11 |        --- |

*** 数据字段表示
数据字段在物理上是一串连续的二进制序列，因此数据字段在内存和硬盘中的表
示就是连续的二进制序列，不同的字段类型有不同的表示方式。数据字段的表示
方式会对程序的性能产生重大的影响，合理的数据字段表示方式会提升程序的读
写性能，并且减少存储消耗。下面具体介绍Gingko中数据字段的表示方式:
1. int8 8位二进制，消耗1bytes，在存储模型中消耗8个比特位，在gingko中每
   一个字段所占用的存储空间都是连续的
** 数据传输
** 冗余备份
** 差错校验
** 数据安全
** 错误恢复   
** 一致性哈希
* 测试与分析
** 性能测试

* 总结
